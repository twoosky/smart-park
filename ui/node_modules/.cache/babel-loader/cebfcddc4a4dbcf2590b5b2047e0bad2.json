{"ast":null,"code":"var _jsxFileName = \"/home/haneul/toiot_copy/toiot-1/ui/src/LogicCoreComponents/RegisterLogic.tsx\";\nimport React, { Component } from 'react';\nimport './LogicCore.css';\nimport InputSensorCard from './InputCards/InputSensorCard';\nimport InputValueCard from './InputCards/InputValueCard'; //import InputGroupCard from './InputCards/InputGroupCard';\n\nimport InputTimeCard from './InputCards/InputTimeCard';\nimport InputActionCard from './InputCards/InputActionCard';\nimport { LOGICCORE_URL, SENSOR_URL, NODE_URL, ACTUATOR_URL } from '../defineUrl';\nimport { Link } from 'react-router-dom';\n\n/* \nRegisterLogic\n- Linked by register logic button\n- register logic\n*/\nclass RegisterLogic extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      sensorList: [],\n      nodeList: [],\n      actuatorList: [],\n      logic_name: '',\n      sensor_info: {\n        id: 0,\n        value: '',\n        label: '',\n        sensor_values: []\n      },\n      selected_value: [],\n      selected_group: {\n        elem: 'empty',\n        arg: {\n          group: []\n        }\n      },\n      selected_time: {\n        elem: 'empty',\n        arg: {\n          range: []\n        }\n      },\n      selected_action: [],\n      nameValid: false,\n      sensorValid: false,\n      actionValid: false\n    };\n\n    this.handleLogicNameChange = e => {\n      // name valid check : user should enter logic name\n      if (e.target.value.length > 0) {\n        this.setState({\n          logic_name: e.target.value,\n          nameValid: true\n        });\n      } else {\n        this.setState({\n          logic_name: e.target.value,\n          nameValid: false\n        });\n      }\n    };\n\n    this.handleSensorCardChange = sensor_info => {\n      // sensor valid check : user should select sensor\n      if (sensor_info !== null) {\n        this.setState({\n          sensor_info,\n          sensorValid: true\n        });\n      } else {\n        this.setState({\n          sensor_info,\n          sensorValid: false\n        });\n      }\n    };\n\n    this.handleGroupCardChange = selected_group => {\n      this.setState({\n        //selected_group :{ logic: \"group\", group : selectedGroups.map((selectedGroup: groupOptionsElem)=>(selectedGroup.value)),},\n        selected_group\n      });\n    };\n\n    this.handleValueCardChange = idx => selectedValue => {\n      // Value card is updated dynamic. It can be added or removed freely.\n      // so find changing field by using received idx and change state.\n      const new_selected_value = this.state.selected_value.map((value, sidx) => {\n        if (idx !== sidx) return value;\n        return selectedValue;\n      });\n      this.setState({\n        selected_value: new_selected_value\n      });\n    };\n\n    this.handleTimeCardChange = selected_time => {\n      this.setState({\n        selected_time\n      });\n    };\n\n    this.handleActionCardChange = idx => selectedAction => {\n      // Action card is updated dynamic. It can be added or removed freely.\n      // so find changing field by using received idx and change state.\n      console.log(selectedAction.elem + \"!!!!\");\n      const new_selected_action = this.state.selected_action.map((action, sidx) => {\n        if (idx !== sidx) return action;\n        return selectedAction;\n      }); // action valid check : User should register more than a action\n\n      if (new_selected_action !== null && new_selected_action !== [] && !new_selected_action.some(value => value.elem === 'empty')) {\n        this.setState({\n          selected_action: new_selected_action,\n          actionValid: true\n        });\n      } else {\n        this.setState({\n          selected_action: new_selected_action,\n          actionValid: false\n        });\n      }\n    };\n\n    this.handleAddValueCardClick = () => {\n      this.setState({\n        selected_value: [...this.state.selected_value, {\n          elem: 'empty',\n          arg: {\n            value: '',\n            range: [{\n              min: 0,\n              max: 255\n            }]\n          }\n        }]\n      });\n    };\n\n    this.handleAddActionCardClick = () => {\n      this.setState({\n        selected_action: [...this.state.selected_action, {\n          elem: 'empty',\n          arg: {\n            text: ''\n          }\n        }]\n      });\n    };\n\n    this.handleRemoveValueCardClick = idx => () => {\n      this.setState({\n        selected_value: this.state.selected_value.filter((s, sidx) => idx !== sidx)\n      });\n    };\n\n    this.handleRemoveActionCardClick = idx => () => {\n      this.setState({\n        selected_action: this.state.selected_action.filter((s, sidx) => idx !== sidx)\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      let elems = [this.state.selected_group, this.state.selected_time];\n      elems = elems.concat(this.state.selected_value, this.state.selected_action);\n      console.log(this.state.selected_action[0] + \"!@!@!@!!@@!@\"); // Filter elem: 'empty' fie ld\n\n      elems = elems.filter(function (logic) {\n        return logic.elem !== 'empty';\n      });\n      var request_msg = {\n        sensor_id: this.state.sensor_info.id,\n        logic_name: this.state.logic_name,\n        elems: elems\n      };\n      var url = LOGICCORE_URL; // Valid check (unvalid -> alert)\n\n      if (!this.state.nameValid) {\n        alert('Please enter logic name.');\n        return;\n      }\n\n      if (!this.state.sensorValid) {\n        alert('Please select a sensor.');\n        return;\n      }\n\n      if (!this.state.actionValid) {\n        alert('Please set more than a action.');\n        return;\n      } // Check whether user really want to submit\n\n\n      var submitValid;\n      submitValid = window.confirm('Are you sure to register this logic?');\n\n      if (!submitValid) {\n        return;\n      }\n\n      fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(request_msg),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => res.json()).then(response => console.log('Success:', JSON.stringify(response))).catch(error => console.error('Error:', error)).then(() => window.location.reload(false));\n    };\n  }\n\n  componentDidMount() {\n    this.getsensorList();\n    this.getnodeList();\n    this.getActuatorList();\n  } // Get sensor list from backend\n\n\n  getsensorList() {\n    var url = SENSOR_URL;\n    fetch(url).then(res => res.json()).then(data => {\n      this.setState({\n        sensorList: data\n      });\n    }).catch(error => console.error('Error:', error));\n  } // Get node list from backend\n\n\n  getnodeList() {\n    var url = NODE_URL;\n    fetch(url).then(res => res.json()).then(data => this.setState({\n      nodeList: data\n    })).catch(error => console.error('Error:', error));\n  }\n\n  getActuatorList() {\n    var url = ACTUATOR_URL;\n    fetch(url).then(res => res.json()).then(data => this.setState({\n      actuatorList: data\n    })).catch(error => console.error('Error:', error));\n  } // Handle node name change by typing\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 6\n      }\n    }, \"Register Logic (Rule)\"), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontSize: '14pt'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 6\n      }\n    }, \"A logic is registered at Logic Core. A logic consists of elements(sensor, group, time, value, action). This is a kind of rule chain. You can build logic about a sensor, and that logic's elements would be 'rule' for action event(e.g. sending email, alert massage).\"), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontSize: '14pt'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 6\n      }\n    }, \"For example, if you want to get email when 'sensor 1's 'value 1's scope is `0 ~ 15`, you should build logic just like you want. Select sensor 'sensor 1', select value 'value 1', and set action to send an email.\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 7\n      }\n    }, \"Logic name\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      name: \"logic_chain_name\",\n      placeholder: \"Enter Logic name\",\n      value: this.state.logic_name,\n      onChange: this.handleLogicNameChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 7\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 6\n      }\n    }, \"Build Logic\"), /*#__PURE__*/React.createElement(InputSensorCard, {\n      sensorList: this.state.sensorList,\n      handleInputSensorCardChange: this.handleSensorCardChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(InputTimeCard, {\n      handleInputTimeCardChange: this.handleTimeCardChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 6\n      }\n    }), this.state.selected_value.map((d, idx) => /*#__PURE__*/React.createElement(InputValueCard, {\n      sensorname: this.state.sensor_info.label,\n      valueList: this.state.sensor_info.sensor_values,\n      handleRemoveInputValueCardClick: this.handleRemoveValueCardClick(idx),\n      handleInputValueCardChange: this.handleValueCardChange(idx),\n      index: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 7\n      }\n    })), this.state.selected_action.map((d, idx) => /*#__PURE__*/React.createElement(InputActionCard, {\n      actuatorList: this.state.actuatorList,\n      handleInputActionCardChange: this.handleActionCardChange(idx),\n      handleRemoveInputActionCardClick: this.handleRemoveActionCardClick(idx),\n      index: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 7\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn margin-right\",\n      style: {\n        background: '#9ACD32'\n      },\n      onClick: this.handleAddValueCardClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 6\n      }\n    }, \"Add value\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn\",\n      style: {\n        background: '#9ACD32'\n      },\n      onClick: this.handleAddActionCardClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 6\n      }\n    }, \"Add action\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(Link, {\n      to: \"/logicCore\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-default float-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 7\n      }\n    }, \"Cancel\")), /*#__PURE__*/React.createElement(\"button\", {\n      //type=\"submit\"\n      type: \"button\",\n      className: \"btn float-right\",\n      style: {\n        background: '#9ACD32'\n      },\n      onClick: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 6\n      }\n    }, \"Submit\")));\n  }\n\n}\n\nexport default RegisterLogic;","map":{"version":3,"sources":["/home/haneul/toiot_copy/toiot-1/ui/src/LogicCoreComponents/RegisterLogic.tsx"],"names":["React","Component","InputSensorCard","InputValueCard","InputTimeCard","InputActionCard","LOGICCORE_URL","SENSOR_URL","NODE_URL","ACTUATOR_URL","Link","RegisterLogic","state","sensorList","nodeList","actuatorList","logic_name","sensor_info","id","value","label","sensor_values","selected_value","selected_group","elem","arg","group","selected_time","range","selected_action","nameValid","sensorValid","actionValid","handleLogicNameChange","e","target","length","setState","handleSensorCardChange","handleGroupCardChange","handleValueCardChange","idx","selectedValue","new_selected_value","map","sidx","handleTimeCardChange","handleActionCardChange","selectedAction","console","log","new_selected_action","action","some","handleAddValueCardClick","min","max","handleAddActionCardClick","text","handleRemoveValueCardClick","filter","s","handleRemoveActionCardClick","handleSubmit","preventDefault","elems","concat","logic","request_msg","sensor_id","url","alert","submitValid","window","confirm","fetch","method","body","JSON","stringify","headers","then","res","json","response","catch","error","location","reload","componentDidMount","getsensorList","getnodeList","getActuatorList","data","render","fontSize","d","background"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n\tsensorListElem,\n\tsensorOptionsElem,\n\tnodeListElem,\n\tactuatorListElem,\n} from '../ElemInterface/ElementsInterface';\nimport { logicElem } from '../ElemInterface/LcElementsInterface';\nimport './LogicCore.css';\nimport InputSensorCard from './InputCards/InputSensorCard';\nimport InputValueCard from './InputCards/InputValueCard';\n//import InputGroupCard from './InputCards/InputGroupCard';\nimport InputTimeCard from './InputCards/InputTimeCard';\nimport InputActionCard from './InputCards/InputActionCard';\nimport { LOGICCORE_URL, SENSOR_URL, NODE_URL, ACTUATOR_URL } from '../defineUrl';\nimport { Link } from 'react-router-dom';\n\ninterface RegisterLogicState {\n\tsensorList: Array<sensorListElem>;\n\tnodeList: Array<nodeListElem>;\n\tactuatorList: Array<actuatorListElem>;\n\n\tlogic_name: string;\n\tsensor_info: sensorOptionsElem;\n\tselected_value: Array<logicElem>;\n\tselected_time: logicElem;\n\tselected_action: Array<logicElem>;\n\tselected_group: logicElem;\n\tnameValid: boolean;\n\tsensorValid: boolean;\n\tactionValid: boolean;\n} \n\n/* \nRegisterLogic\n- Linked by register logic button\n- register logic\n*/\nclass RegisterLogic extends Component<{}, RegisterLogicState> {\n\tstate: RegisterLogicState = {\n\t\tsensorList: [],\n\t\tnodeList: [],\n\t\tactuatorList: [],\n\n\t\tlogic_name: '',\n\t\tsensor_info: {\n\t\t\tid: 0,\n\t\t\tvalue: '',\n\t\t\tlabel: '',\n\t\t\tsensor_values: [],\n\t\t},\n\t\tselected_value: [],\n\t\tselected_group: { elem: 'empty', arg: { group: [] } },\n\t\tselected_time: { elem: 'empty', arg: { range: [] } },\n\t\tselected_action: [],\n\n\t\tnameValid: false,\n\t\tsensorValid: false,\n\t\tactionValid: false,\n\t};\n\tcomponentDidMount() {\n\t\tthis.getsensorList();\n\t\tthis.getnodeList();\n\t\tthis.getActuatorList();\n\t}\n\n\t// Get sensor list from backend\n\tgetsensorList() {\n\t\tvar url = SENSOR_URL;\n\n\t\tfetch(url)\n\t\t\t.then((res) => res.json())\n\t\t\t.then((data) => {\n\t\t\t\tthis.setState({ sensorList: data });\n\t\t\t})\n\t\t\t.catch((error) => console.error('Error:', error));\n\t}\n\n\t// Get node list from backend\n\tgetnodeList() {\n\t\tvar url = NODE_URL;\n\n\t\tfetch(url)\n\t\t\t.then((res) => res.json())\n\t\t\t.then((data) => this.setState({ nodeList: data }))\n\t\t\t.catch((error) => console.error('Error:', error));\n\t}\n\n\tgetActuatorList() {\n\t\tvar url = ACTUATOR_URL;\n\n\t\tfetch(url)\n\t\t\t.then((res) => res.json())\n\t\t\t.then((data) => this.setState({ actuatorList: data }))\n\t\t\t.catch((error) => console.error('Error:', error));\n\t}\n\n\t// Handle node name change by typing\n\thandleLogicNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\t// name valid check : user should enter logic name\n\t\tif (e.target.value.length > 0) {\n\t\t\tthis.setState({\n\t\t\t\tlogic_name: e.target.value,\n\t\t\t\tnameValid: true,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tlogic_name: e.target.value,\n\t\t\t\tnameValid: false,\n\t\t\t});\n\t\t}\n\t};\n\n\t// handle sensor card change\n\thandleSensorCardChange = (sensor_info: sensorOptionsElem) => {\n\t\t// sensor valid check : user should select sensor\n\t\tif (sensor_info !== null) {\n\t\t\tthis.setState({\n\t\t\t\tsensor_info,\n\t\t\t\tsensorValid: true,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tsensor_info,\n\t\t\t\tsensorValid: false,\n\t\t\t});\n\t\t}\n\t};\n\n\t// handle group card change\n\thandleGroupCardChange = (selected_group: logicElem) => {\n\t\tthis.setState({\n\t\t\t//selected_group :{ logic: \"group\", group : selectedGroups.map((selectedGroup: groupOptionsElem)=>(selectedGroup.value)),},\n\t\t\tselected_group,\n\t\t});\n\t};\n\n\t// handle value card change\n\thandleValueCardChange = (idx: number) => (selectedValue: logicElem) => {\n\t\t// Value card is updated dynamic. It can be added or removed freely.\n\t\t// so find changing field by using received idx and change state.\n\t\tconst new_selected_value = this.state.selected_value.map(\n\t\t\t(value: logicElem, sidx: number) => {\n\t\t\t\tif (idx !== sidx) return value;\n\t\t\t\treturn selectedValue;\n\t\t\t}\n\t\t);\n\t\tthis.setState({ selected_value: new_selected_value });\n\t};\n\n\t// Handle time card change\n\thandleTimeCardChange = (selected_time: logicElem) => {\n\t\tthis.setState({\n\t\t\tselected_time,\n\t\t});\n\t};\n\n\t// Handle action card change\n\thandleActionCardChange = (idx: number) => (selectedAction: logicElem) => {\n\t\t// Action card is updated dynamic. It can be added or removed freely.\n\t\t// so find changing field by using received idx and change state.\n\t\tconsole.log(selectedAction.elem + \"!!!!\");\n\t\tconst new_selected_action = this.state.selected_action.map(\n\t\t\t(action: logicElem, sidx: number) => {\n\t\t\t\tif (idx !== sidx) return action;\n\t\t\t\treturn selectedAction;\n\t\t\t}\n\t\t);\n\n\t\t// action valid check : User should register more than a action\n\t\tif (\n\t\t\tnew_selected_action !== null &&\n\t\t\tnew_selected_action !== [] &&\n\t\t\t!new_selected_action.some((value) => value.elem === 'empty')\n\t\t) {\n\t\t\tthis.setState({\n\t\t\t\tselected_action: new_selected_action,\n\t\t\t\tactionValid: true,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tselected_action: new_selected_action,\n\t\t\t\tactionValid: false,\n\t\t\t});\n\t\t}\n\t};\n\n\t// handle add value card button click event\n\thandleAddValueCardClick = () => {\n\t\tthis.setState({\n\t\t\tselected_value: [\n\t\t\t\t...this.state.selected_value,\n\t\t\t\t{ elem: 'empty', arg: { value: '', range: [{ min: 0, max: 255 }] } },\n\t\t\t],\n\t\t});\n\t};\n\n\t// handle add action card button click event\n\thandleAddActionCardClick = () => {\n\t\tthis.setState({\n\t\t\tselected_action: [\n\t\t\t\t...this.state.selected_action,\n\t\t\t\t{ elem: 'empty', arg: { text: '' } },\n\t\t\t],\n\t\t});\n\t};\n\n\t// handle remove value card button click event\n\thandleRemoveValueCardClick = (idx: number) => () => {\n\t\tthis.setState({\n\t\t\tselected_value: this.state.selected_value.filter(\n\t\t\t\t(s: any, sidx: number) => idx !== sidx\n\t\t\t),\n\t\t});\n\t};\n\n\t// handle remove action card button click event\n\thandleRemoveActionCardClick = (idx: number) => () => {\n\t\tthis.setState({\n\t\t\tselected_action: this.state.selected_action.filter(\n\t\t\t\t(s: any, sidx: number) => idx !== sidx\n\t\t\t),\n\t\t});\n\t};\n\n\t// selected sensor에 따른 value_list에서, selected_value를 제외한 list 추출\n\t// this didn't work I have to implement this function..\n\t// getUnselectedValueList() {\n\t// \tvar valueOptions = this.state.sensor_info.value_list;\n\n\t// \tfor (let selected_value of this.state.selected_value) {\n\t// \t\tif (selected_value.elem !== 'value') continue;\n\t// \t\tvalueOptions = valueOptions.filter(\n\t// \t\t\t(value) =>\n\t// \t\t\t\t!value.value_name.includes((selected_value.arg as lcValueArg).value)\n\t// \t\t);\n\t// \t}\n\t// \tthis.setState({\n\t// \t\tvalueOptions,\n\t// \t});\n\t// }\n\n\thandleSubmit = (e: React.MouseEvent<HTMLButtonElement>) => {\n\t\te.preventDefault();\n\t\tlet elems: Array<logicElem> = [\n\t\t\tthis.state.selected_group,\n\t\t\tthis.state.selected_time,\n\t\t];\n\t\telems = elems.concat(\n\t\t\tthis.state.selected_value,\n\t\t\tthis.state.selected_action\n\t\t);\n\n\t\tconsole.log(this.state.selected_action[0] + \"!@!@!@!!@@!@\");\n\n\t\t// Filter elem: 'empty' fie ld\n\t\telems = elems.filter(function (logic) {\n\t\t\treturn logic.elem !== 'empty';\n\t\t});\n\n\t\tvar request_msg = {\n\t\t\tsensor_id: this.state.sensor_info.id,\n\t\t\tlogic_name: this.state.logic_name,\n\t\t\telems: elems,\n\t\t};\n\t\tvar url = LOGICCORE_URL;\n\n\t\t// Valid check (unvalid -> alert)\n\t\tif (!this.state.nameValid) {\n\t\t\talert('Please enter logic name.');\n\t\t\treturn;\n\t\t}\n\t\tif (!this.state.sensorValid) {\n\t\t\talert('Please select a sensor.');\n\t\t\treturn;\n\t\t}\n\t\tif (!this.state.actionValid) {\n\t\t\talert('Please set more than a action.');\n\t\t\treturn;\n\t\t}\n\n\t\t// Check whether user really want to submit\n\t\tvar submitValid: boolean;\n\t\tsubmitValid = window.confirm('Are you sure to register this logic?');\n\t\tif (!submitValid) {\n\t\t\treturn;\n\t\t}\n\n\t\tfetch(url, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(request_msg),\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then((response) => console.log('Success:', JSON.stringify(response)))\n\t\t\t.catch((error) => console.error('Error:', error))\n\t\t\t.then(() => window.location.reload(false));\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<form>\n\t\t\t\t\t<h2>Register Logic (Rule)</h2>\n\t\t\t\t\t<p style={{ fontSize: '14pt' }}>\n\t\t\t\t\t\tA logic is registered at Logic Core. A logic consists of\n\t\t\t\t\t\telements(sensor, group, time, value, action). This is a kind of rule\n\t\t\t\t\t\tchain. You can build logic about a sensor, and that logic's elements\n\t\t\t\t\t\twould be 'rule' for action event(e.g. sending email, alert massage).\n\t\t\t\t\t</p>\n\t\t\t\t\t<p style={{ fontSize: '14pt' }}>\n\t\t\t\t\t\tFor example, if you want to get email when 'sensor 1's 'value 1's\n\t\t\t\t\t\tscope is `0 ~ 15`, you should build logic just like you want. Select\n\t\t\t\t\t\tsensor 'sensor 1', select value 'value 1', and set action to send an\n\t\t\t\t\t\temail.\n\t\t\t\t\t</p>\n\t\t\t\t\t<br />\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h5>Logic name</h5>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\tname=\"logic_chain_name\"\n\t\t\t\t\t\t\tplaceholder=\"Enter Logic name\"\n\t\t\t\t\t\t\tvalue={this.state.logic_name}\n\t\t\t\t\t\t\tonChange={this.handleLogicNameChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h5>Build Logic</h5>\n\t\t\t\t\t<InputSensorCard\n\t\t\t\t\t\tsensorList={this.state.sensorList}\n\t\t\t\t\t\thandleInputSensorCardChange={this.handleSensorCardChange}\n\t\t\t\t\t/>\n\t\t\t\t\t{/* <InputGroupCard\n\t\t\t\t\t\tnodeList={this.state.nodeList}\n\t\t\t\t\t\thandleInputGroupCardChange={this.handleGroupCardChange}\n\t\t\t\t\t/> */}\n\t\t\t\t\t<InputTimeCard\n\t\t\t\t\t\thandleInputTimeCardChange={this.handleTimeCardChange}\n\t\t\t\t\t/>\n\t\t\t\t\t{this.state.selected_value.map((d: any, idx: number) => (\n\t\t\t\t\t\t<InputValueCard\n\t\t\t\t\t\t\tsensorname={this.state.sensor_info.label}\n\t\t\t\t\t\t\tvalueList={this.state.sensor_info.sensor_values}\n\t\t\t\t\t\t\thandleRemoveInputValueCardClick={this.handleRemoveValueCardClick(\n\t\t\t\t\t\t\t\tidx\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\thandleInputValueCardChange={this.handleValueCardChange(idx)}\n\t\t\t\t\t\t\tindex={idx}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t\t{this.state.selected_action.map((d: any, idx: number) => (\n\t\t\t\t\t\t<InputActionCard\n\t\t\t\t\t\t\tactuatorList={this.state.actuatorList}\n\t\t\t\t\t\t\thandleInputActionCardChange={this.handleActionCardChange(idx)}\n\t\t\t\t\t\t\thandleRemoveInputActionCardClick={this.handleRemoveActionCardClick(\n\t\t\t\t\t\t\t\tidx\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tindex={idx}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tclassName=\"btn margin-right\"\n\t\t\t\t\t\tstyle={{ background: '#9ACD32' }}\n\t\t\t\t\t\tonClick={this.handleAddValueCardClick}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd value\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\tstyle={{ background: '#9ACD32' }}\n\t\t\t\t\t\tonClick={this.handleAddActionCardClick}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd action\n\t\t\t\t\t</button>\n\t\t\t\t\t<p></p>\n\t\t\t\t\t<Link to=\"/logicCore\">\n\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-default float-right\">\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</Link>\n\t\t\t\t\t<button\n\t\t\t\t\t\t//type=\"submit\"\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tclassName=\"btn float-right\"\n\t\t\t\t\t\tstyle={{ background: '#9ACD32' }}\n\t\t\t\t\t\tonClick={this.handleSubmit}\n\t\t\t\t\t>\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default RegisterLogic;\n"]},"metadata":{},"sourceType":"module"}