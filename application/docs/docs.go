// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/regist/logic": {
            "get": {
                "description": "get logics list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logic"
                ],
                "summary": "List logics info",
                "responses": {
                    "200": {
                        "description": "return all logics info.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Logic"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Add logic info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logic"
                ],
                "summary": "Add logic info",
                "parameters": [
                    {
                        "description": "logic_name, elems",
                        "name": "logic",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/adapter.Logic"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "include sensor info",
                        "schema": {
                            "$ref": "#/definitions/adapter.Logic"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete logic",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logic"
                ],
                "summary": "Delete logic",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "logic's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "include sensor info",
                        "schema": {
                            "$ref": "#/definitions/model.Logic"
                        }
                    }
                }
            }
        },
        "/regist/logic-service": {
            "get": {
                "description": "get LogicServices list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LogicService"
                ],
                "summary": "List LogicServices info",
                "responses": {
                    "200": {
                        "description": "return all logics info.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.LogicService"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete LogicService",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logicService"
                ],
                "summary": "Delete LogicService",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "logicSerivce's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "include topic info",
                        "schema": {
                            "$ref": "#/definitions/model.Logic"
                        }
                    }
                }
            }
        },
        "/regist/node": {
            "get": {
                "description": "get nodes list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "node"
                ],
                "summary": "List sensor node",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page num",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size(row)",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "sink filter",
                        "name": "sink",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "location(longitude) filter",
                        "name": "left",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "location(longitude) filter",
                        "name": "right",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "location(Latitude) filter",
                        "name": "up",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "location(Latitude) filter",
                        "name": "down",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "default, return all nodes. if location query is exist, return location filter result(square).",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Node"
                            }
                        }
                    },
                    "201": {
                        "description": "if page query is exist, return pagenation result. pages only valid when page is 1.",
                        "schema": {
                            "$ref": "#/definitions/adapter.NodePage"
                        }
                    }
                }
            },
            "post": {
                "description": "Add sensor node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "node"
                ],
                "summary": "Add sensor node",
                "parameters": [
                    {
                        "description": "name, lat, lng, sink_id",
                        "name": "node",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Node"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "include sink, sink.topic, sensors, sensors.logics info",
                        "schema": {
                            "$ref": "#/definitions/model.Node"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete sensor node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "node"
                ],
                "summary": "Delete sensor node",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "node's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "include sink, sink.topic info",
                        "schema": {
                            "$ref": "#/definitions/model.Node"
                        }
                    }
                }
            }
        },
        "/regist/sensor": {
            "get": {
                "description": "get sensors list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensor"
                ],
                "summary": "List sensor info",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page num",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size(row)",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "default, return all sensors.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Sensor"
                            }
                        }
                    },
                    "201": {
                        "description": "if page query is exist, return pagenation result. pages only valid when page is 1.",
                        "schema": {
                            "$ref": "#/definitions/adapter.SensorPage"
                        }
                    }
                }
            },
            "post": {
                "description": "Add sensor info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensor"
                ],
                "summary": "Add sensor info",
                "parameters": [
                    {
                        "description": "name, sensorValues(only value name)",
                        "name": "sensor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Sensor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "include sensorValues info",
                        "schema": {
                            "$ref": "#/definitions/model.Node"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete sensor",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensor"
                ],
                "summary": "Delete sensor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "sensor's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "include logics info",
                        "schema": {
                            "$ref": "#/definitions/model.Sensor"
                        }
                    }
                }
            }
        },
        "/regist/sink": {
            "get": {
                "description": "get sinks list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sink"
                ],
                "summary": "List sink node(raspi info)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page num",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size(row)",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "default, return all sinks.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Sink"
                            }
                        }
                    },
                    "201": {
                        "description": "if page query is exist, return pagenation result. pages only valid when page is 1.",
                        "schema": {
                            "$ref": "#/definitions/adapter.SinkPage"
                        }
                    }
                }
            },
            "post": {
                "description": "Add sink node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sink"
                ],
                "summary": "Add sink node(raspi info)",
                "parameters": [
                    {
                        "description": "name, address(only ip address, don't include port)",
                        "name": "sink",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Sink"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "include topic info",
                        "schema": {
                            "$ref": "#/definitions/model.Sink"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete sink node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sink"
                ],
                "summary": "Delete sink node(raspi info)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "sink's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "include topic, nodes info",
                        "schema": {
                            "$ref": "#/definitions/model.Sink"
                        }
                    }
                }
            }
        },
        "/regist/topic": {
            "get": {
                "description": "get topics list",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "topic"
                ],
                "summary": "List topics info",
                "responses": {
                    "200": {
                        "description": "return all topics info.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Topic"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Add topic info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "topic"
                ],
                "summary": "Add topic info",
                "parameters": [
                    {
                        "description": "name, partitions, replications",
                        "name": "logic",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Logic"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Topic"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete topic(kafka topic for logicservices)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "topic"
                ],
                "summary": "Delete topic(kafka topic for logicservices)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "topic's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "include logicService info",
                        "schema": {
                            "$ref": "#/definitions/model.Topic"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "adapter.Element": {
            "type": "object",
            "properties": {
                "arg": {
                    "type": "object",
                    "additionalProperties": true
                },
                "elem": {
                    "type": "string"
                }
            }
        },
        "adapter.Logic": {
            "type": "object",
            "properties": {
                "elems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/adapter.Element"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "logic_name": {
                    "type": "string"
                },
                "sensor": {
                    "$ref": "#/definitions/model.Sensor"
                },
                "sensor_id": {
                    "type": "integer"
                }
            }
        },
        "adapter.NodePage": {
            "type": "object",
            "properties": {
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Node"
                    }
                },
                "pages": {
                    "type": "integer"
                }
            }
        },
        "adapter.SensorPage": {
            "type": "object",
            "properties": {
                "pages": {
                    "type": "integer"
                },
                "sensors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Sensor"
                    }
                }
            }
        },
        "adapter.SinkPage": {
            "type": "object",
            "properties": {
                "pages": {
                    "type": "integer"
                },
                "sinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Sink"
                    }
                }
            }
        },
        "model.Logic": {
            "type": "object",
            "properties": {
                "elems": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "sensor": {
                    "$ref": "#/definitions/model.Sensor"
                },
                "sensor_id": {
                    "type": "integer"
                }
            }
        },
        "model.LogicService": {
            "type": "object",
            "properties": {
                "addr": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "topic": {
                    "$ref": "#/definitions/model.Topic"
                },
                "topic_id": {
                    "type": "integer"
                }
            }
        },
        "model.Node": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "lat": {
                    "type": "number"
                },
                "lng": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "sensors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Sensor"
                    }
                },
                "sink": {
                    "$ref": "#/definitions/model.Sink"
                },
                "sink_id": {
                    "type": "integer"
                }
            }
        },
        "model.Sensor": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "logics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Logic"
                    }
                },
                "name": {
                    "type": "string"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Node"
                    }
                },
                "sensor_values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SensorValue"
                    }
                }
            }
        },
        "model.SensorValue": {
            "type": "object",
            "properties": {
                "index": {
                    "type": "integer"
                },
                "sensor_id": {
                    "type": "integer"
                },
                "value_name": {
                    "type": "string"
                }
            }
        },
        "model.Sink": {
            "type": "object",
            "properties": {
                "addr": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Node"
                    }
                },
                "topic": {
                    "$ref": "#/definitions/model.Topic"
                },
                "topic_id": {
                    "type": "integer"
                }
            }
        },
        "model.Topic": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "logic_services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.LogicService"
                    }
                },
                "name": {
                    "type": "string"
                },
                "partitions": {
                    "type": "integer"
                },
                "replications": {
                    "type": "integer"
                },
                "sinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Sink"
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
